#include<iostream>
#include<stdio.h>
#include <stdlib.h>
#include <conio.h>

using namespace std;
struct node
{
    int index,dist;
};
node    graph[100][100];
int     dist[100],read[100];
int N;
int Len[100];

int minimum()
{
   int i,pos;
   for(i=0;i<N;i++)
   {
       if(read[i]==0)
       {
           pos=i;
           break;
       }
   }
   for(int i=0;i<N;i++)
   {
       if(read[i]==0)
       {
            if(dist[i]<dist[pos])
                pos=i;
       }
   }
    return pos;
}
int dijkstras(int u,int v)
{
    int i;
    dist[u]=0;
    read[u]=0;
    for(i=0;i<N;i++)
    {
        if(i!=u)
        {
            read[i]=0;
            dist[i]=99999;
        }
    }

    int x,y,no_read,new_dist;
    while(no_read<N)
    {
        x=minimum();
        for(i=0;i<Len[x];i++)
        {
            y=graph[x][i].index;
            new_dist=dist[x]+graph[x][i].dist;

            if(new_dist<dist[y])
                dist[y]=new_dist;
        }
        read[x]=1;
        no_read++;
    }
    return dist[v];
}


int main()
{
int nodes;
char N1,N2;
int n1,n2,d;
int no_connect,i;
 cin>>no_connect;
N=0;
 for (i = 0; i<N; i++)
     Len[i] = 0;
 for(i=0;i<no_connect;i++)
{
     scanf("%c %c %d",&N1,&N2,&d);
     n1=N1-65;
     n2=N2-65;
     if(n2+1>N) N=n2+1;
     graph[n1][Len[n1]].index = n2;
     graph[n1][Len[n1]].dist = d;
     Len[n1] +=1;
     graph[n2][Len[n2]].index = n1;
     graph[n2][Len[n2]].dist = d;
     Len[n2] +=1;
 }

 char U,V;
 int u,v;
 scanf("%c %c",&U,&V);
 u=U-65;
 v=V-65;
 int shorty = dijkstras(u,v);
 if(shorty==99999)
    cout<<"NoRoute";
else
 cout<<shorty;
 return 0;
}
/*
int main()
{
int nodes;
int n1,n2,d;
int no_connect,i;
 cout<<"How many Nodes?: ";
 cin>> N;
 for (i = 0; i<N; i++)
     Len[i] = 0;
cout<<"start end distance\n";
 do{
     cin>>n1>>n2>>d;
     cout<<"___\n";
     if(n1==-1&&n2==-1&&d==-1)
        break;
     graph[n1][Len[n1]].index = n2;
     graph[n1][Len[n1]].dist = d;
     Len[n1] +=1;
     graph[n2][Len[n2]].index = n1;
     graph[n2][Len[n2]].dist = d;
     Len[n2] +=1;
 }while(true);

 int u,v;
 cout<<"Staring Node: ";
 cin>>u;
 cout<<"Ending Node: ";
 cin>>v;
 int shorty = dijkstras(u,v);
 cout<<shorty;
 return 0;
}*/


